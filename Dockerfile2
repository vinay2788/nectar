# Use Ubuntu 20.04 as the base image for better package control
FROM ubuntu:20.04

# Set non-interactive mode for apt to prevent interactive prompts
ENV DEBIAN_FRONTEND=noninteractive
ENV NVM_DIR=/root/.nvm

# Set working directory
WORKDIR /app

# Install required dependencies
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    software-properties-common \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Install GlusterFS 10.1 manually
RUN wget https://download.gluster.org/pub/gluster/glusterfs/10/10.1/Debian/focal/amd64/glusterfs-client_10.1-1_amd64.deb && \
    dpkg -i glusterfs-client_10.1-1_amd64.deb || apt-get install -f -y && \
    rm -rf /var/lib/apt/lists/* glusterfs-client_10.1-1_amd64.deb

# Install FFmpeg 6 from the official source
RUN add-apt-repository ppa:savoury1/ffmpeg6 -y && \
    apt-get update && \
    apt-get install -y ffmpeg && \
    rm -rf /var/lib/apt/lists/*

# Install NVM 0.39.1 and Node.js 18
RUN curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash && \
    . "$NVM_DIR/nvm.sh" && \
    nvm install 18 && \
    nvm alias default 18

# Set environment variables for Node.js
ENV NODE_VERSION=18
ENV PATH="$NVM_DIR/versions/node/v$NODE_VERSION/bin:$PATH"

# Copy package.json and package-lock.json first to leverage Docker caching
COPY package*.json ./

# Install dependencies in production mode
RUN /bin/bash -c ". $NVM_DIR/nvm.sh && nvm use $NODE_VERSION && npm ci --only=production"

# Copy the rest of the application files
COPY . .

# Build the Next.js application
RUN /bin/bash -c ". $NVM_DIR/nvm.sh && nvm use $NODE_VERSION && npm run build"

# Expose the correct port (Make sure ECS task also maps port 3000)
EXPOSE 3000

# Ensure Next.js runs properly in production mode
ENV NODE_ENV=production

# Start the application correctly
CMD ["/bin/bash", "-c", ". $NVM_DIR/nvm.sh && nvm use $NODE_VERSION && npm run start"]

